// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var passThrough = ( props => props.children );

function make(children) {
  return ReasonReact.wrapJsForReason(passThrough, { }, children);
}

var RenderChildren = /* module */[
  /* passThrough */passThrough,
  /* make */make
];

function CreateContext(C) {
  var componentState = [C[/* defaultValue */2]];
  var subscriptions = [/* [] */0];
  var addSubscription = function (f) {
    subscriptions[0] = /* :: */[
      f,
      subscriptions[0]
    ];
    return (function () {
        subscriptions[0] = List.filter((function (sub) {
                  return +(sub !== f);
                }))(subscriptions[0]);
        return /* () */0;
      });
  };
  var updateState = function (newStateOpt) {
    var newState = newStateOpt ? newStateOpt[0] : C[/* defaultValue */2];
    componentState[0] = newState;
    return List.iter((function (f) {
                  return Curry._1(f, newState);
                }), subscriptions[0]);
  };
  var component = ReasonReact.reducerComponent(C[/* name */1] + "ContextConsumer");
  var make = function (children) {
    var newrecord = component.slice();
    newrecord[/* render */9] = (function (param) {
        var send = param[/* send */4];
        var dispatch = function (configAction) {
          return Curry._1(send, /* SendAction */Block.__(1, [configAction]));
        };
        return Curry._2(children, dispatch, param[/* state */2]);
      });
    newrecord[/* initialState */10] = (function () {
        return componentState[0];
      });
    newrecord[/* reducer */12] = (function (componentAction, componentState) {
        if (componentAction.tag) {
          var configAction = componentAction[0];
          return /* SideEffects */Block.__(2, [(function () {
                        return updateState(/* Some */[Curry._2(C[/* reducer */0], configAction, componentState)]);
                      })]);
        } else {
          return /* Update */Block.__(0, [componentAction[0]]);
        }
      });
    newrecord[/* subscriptions */13] = (function (param) {
        var send = param[/* send */4];
        return /* :: */[
                /* Sub */[
                  (function () {
                      return addSubscription((function (newState) {
                                    return Curry._1(send, /* ChangeState */Block.__(0, [newState]));
                                  }));
                    }),
                  (function (unSub) {
                      return Curry._1(unSub, /* () */0);
                    })
                ],
                /* [] */0
              ];
      });
    return newrecord;
  };
  var Consumer = /* module */[
    /* component */component,
    /* make */make
  ];
  return /* module */[
          /* componentState */componentState,
          /* subscriptions */subscriptions,
          /* addSubscription */addSubscription,
          /* updateState */updateState,
          /* Consumer */Consumer
        ];
}

exports.RenderChildren = RenderChildren;
exports.CreateContext = CreateContext;
/* passThrough Not a pure module */
